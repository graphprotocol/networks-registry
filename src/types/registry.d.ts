/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface TheGraphNetworksRegistrySchema {
  /**
   * Reference to this schema file
   */
  $schema: string;
  title: string;
  description: string;
  /**
   * Version of the registry
   */
  version: string;
  /**
   * Date and time of the last update
   */
  updatedAt: string;
  /**
   * List of networks
   */
  networks: Network[];
}
export interface Network {
  /**
   * Established name of the network in The Graph ecosystem, e.g. mainnet, btc, arweave-mainnet, near-testnet
   */
  id: string;
  /**
   * Short display name of the network, e.g. Ethereum, BNB
   */
  shortName: string;
  /**
   * Second display name of the network, e.g. Sepolia, Nova
   */
  secondName?: string;
  /**
   * Display name of the network, e.g. Ethereum Mainnet, Bitcoin Testnet
   */
  fullName: string;
  /**
   * CAIP-2 Chain ID, e.g. eip155:1, bip122:000000000019d6689c085ae165831e93
   */
  caip2Id: string;
  /**
   * [optional] List of possible aliases for the network id, e.g. ethereum, eth, mainnet, eth-mainnet
   */
  aliases?: string[];
  /**
   * Whether the network is a mainnet/testnet/devnet
   */
  networkType: "mainnet" | "testnet" | "devnet" | "beacon";
  /**
   * Relations to other networks in the registry
   */
  relations?: {
    /**
     * Kind of relation
     */
    kind:
      | "testnetOf"
      | "beaconOf"
      | "forkedFrom"
      | "l2Of"
      | "shardOf"
      | "evmOf"
      | "svmOf"
      | "other";
    /**
     * ID of the related network, e.g. mainnet, near-mainnet
     */
    network: string;
  }[];
  /**
   * Firehose block information
   */
  firehose?: {
    /**
     * Block type, e.g. sf.ethereum.type.v2.Block
     */
    blockType: string;
    /**
     * Bytes encoding, e.g. hex, 0xhex, base58
     */
    bytesEncoding: "hex" | "0xhex" | "base58" | "base64" | "other";
    /**
     * Protobuf definitions on buf.build, e.g. https://buf.build/streamingfast/firehose-ethereum
     */
    bufUrl: string;
    /**
     * [optional] Whether there is support for extended EVM block model
     */
    evmExtendedModel?: boolean;
    /**
     * Block features supported by the network
     */
    blockFeatures?: string[];
    /**
     * First available block information
     */
    firstStreamableBlock?: {
      /**
       * Block height of the first streamable block. Can be different from genesis
       */
      height: number;
      /**
       * Id of the first streamable block either in 0x-prefixed hex or base58
       */
      id: string;
    };
    /**
     * [optional] Whether the network is deprecated in Firehose software
     */
    deprecated?: boolean;
  };
  /**
   * Token API specific configuration information
   */
  tokenApi?: {
    features?: ("tokens" | "dexes" | "nfts" | "other")[];
    /**
     * Network ID in Token API, has to be an ID or alias of an existing network
     */
    networkId?: string;
    /**
     * [optional] Whether the network is deprecated in Token API software
     */
    deprecated?: boolean;
  };
  /**
   * Symbol of the native token
   */
  nativeToken?: string;
  /**
   * Graph Node specific configuration information
   */
  graphNode?: {
    /**
     * [optional] Protocol name in graph-node, e.g. ethereum, near, arweave
     */
    protocol?:
      | "ethereum"
      | "near"
      | "arweave"
      | "cosmos"
      | "starknet"
      | "other";
    /**
     * [optional] Whether the network is deprecated in graph-node software
     */
    deprecated?: boolean;
  };
  /**
   * URLs for the block explorers
   */
  explorerUrls?: string[];
  /**
   * Services available for the network in the ecosystem
   */
  services: {
    /**
     * Subgraph studio deployment URLs, e.g. https://api.thegraph.com/deploy
     */
    subgraphs?: string[];
    /**
     * Substreams-based subgraphs studio deployment URLs, e.g. https://api.thegraph.com/deploy
     */
    sps?: string[];
    /**
     * Firehose gRPC URLs, e.g. eth.firehose.pinax.network:443
     */
    firehose?: string[];
    /**
     * Substreams gRPC URLs, e.g. eth.substreams.pinax.network:443
     */
    substreams?: string[];
    /**
     * Token API URLs, e.g. https://token-api.thegraph.com
     */
    tokenApi?: string[];
  };
  /**
   * Issuance rewards on the Graph Network for this chain
   */
  issuanceRewards: boolean;
  /**
   * Icons for the network
   */
  icon?: {
    /**
     * Web3Icons icon - see https://github.com/0xa3k5/web3icons
     */
    web3Icons?: {
      /**
       * Web3Icons icon ID
       */
      name: string;
      /**
       * Variants of the icon, if none specified - all are available
       */
      variants?: string[];
    };
  };
  /**
   * List of RPC URLs for the chain. Use {CUSTOM_API_KEY} as a placeholder for a private API key
   */
  rpcUrls?: string[];
  /**
   * List of API URLs for the network, i.e. Etherescan-like API to get ABI. Use {CUSTOM_API_KEY} as a placeholder for a private API key
   */
  apiUrls?: {
    url: string;
    /**
     * Kind of API
     */
    kind: "etherscan" | "blockscout" | "ethplorer" | "subscan" | "other";
  }[];
  /**
   * URL to the chain documentation
   */
  docsUrl?: string;
  /**
   * Documentation to run indexer components for this network
   */
  indexerDocsUrls?: {
    /**
     * URL to the documentation, e.g. https://docs.infradao.com/archive-nodes-101/arbitrum
     */
    url: string;
    /**
     * Docs description, e.g. Arbitrum 101
     */
    description?: string;
  }[];
}
